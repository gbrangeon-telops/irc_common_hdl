--------------------------------------------------------------------------------
-- Copyright (c) 1995-2007 Xilinx, Inc.  All rights reserved.
--------------------------------------------------------------------------------
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /    Vendor: Xilinx 
-- \   \   \/     Version : 9.1.03i
--  \   \         Application : xaw2vhdl
--  /   /         Filename : main_dcm.vhd
-- /___/   /\     Timestamp : 04/26/2007 16:18:13
-- \   \  /  \ 
--  \___\/\___\ 
--
--Command: xaw2vhdl-st D:\Telops\FIR-00186\src\Clocks\main_dcm.xaw D:\Telops\FIR-00186\src\Clocks\main_dcm
--Design Name: main_dcm
--Device: xc4vfx100-ff1152-10
--
-- Module main_dcm
-- Generated by Xilinx Architecture Wizard
-- Written for synthesis tool: XST

library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;
library UNISIM;
use UNISIM.Vcomponents.ALL;
library common_hdl;

entity main_dcm is
   port ( CLKIN_N_IN        : in    std_logic; 
      CLKIN_P_IN        : in    std_logic; 
      RST_IN            : in    std_logic; 
      CLKFX_OUT         : out   std_logic; 
      CLKIN_IBUFGDS_OUT : out   std_logic; 
      CLK0_OUT          : out   std_logic; 
      CLK2X_OUT         : out   std_logic; 
      CLKDV_OUT         : out   std_logic; 
      DCM_NOT_LOCKED    : out   std_logic);
end main_dcm;                    

-- translate_off
--architecture asim of main_dcm is 
--   constant CLK_PERIOD : time := 10 ns;
--   signal CLKFX_i : std_logic := '0';
--   signal CLK0_i  : std_logic := '0';
--   signal CLK2X_i : std_logic := '0';
--   signal CLKDV_i : std_logic := '0';
--begin
--   
--   CLKIN_IBUFGDS_OUT <= CLKIN_P_IN;
--   CLKFX_OUT <= CLKFX_i;
--   CLK0_OUT <= CLK0_i;     
--   CLK2X_OUT <= CLK2X_i;
--   CLKDV_OUT <= CLKDV_i;
--   
--   CLK0_GEN: process(CLK0_i)
--   begin
--      CLK0_i <= not CLK0_i after CLK_PERIOD/2; 
--   end process;   
--   
--   CLK2X_GEN: process(CLK2X_i)
--   begin
--      CLK2X_i <= not CLK2X_i after CLK_PERIOD/4; 
--   end process;     
--   
--   CLKDV_GEN: process(CLKDV_i)
--   begin
--      CLKDV_i <= not CLKDV_i after CLK_PERIOD; 
--   end process;    
--
--   CLKFX_GEN: process(CLKFX_i)
--   begin
--      CLKFX_i <= not CLKFX_i after CLK_PERIOD/4*3/2;
--   end process;    
--   
--   clock_proc : process (CLKIN_P_IN)
--      variable delay : integer range 0 to 31 := 0;
--   begin          
--      if RST_IN = '1' then
--         DCM_NOT_LOCKED <= '1';
--      elsif rising_edge(CLKIN_P_IN) then
--         if delay < 31 then
--            delay := delay + 1;
--         end if;                                
--         if delay > 23 then
--            DCM_NOT_LOCKED <= '0';
--         else              
--            DCM_NOT_LOCKED <= '1';
--         end if;            
--      end if;      
--   end process;  
--   
--end asim;   
-- translate_on

architecture BEHAVIORAL of main_dcm is
   signal dcm_rst           : std_logic;
   signal CLKFB_IN          : std_logic;
   signal CLKFX_BUF         : std_logic;
   signal CLK2X_BUF         : std_logic;
   signal CLKDV_BUF         : std_logic;
   signal CLKIN_IBUFGDS     : std_logic;
   signal CLK0_BUF          : std_logic;
   signal GND_BIT           : std_logic;
   signal GND_BUS_7         : std_logic_vector (6 downto 0);
   signal GND_BUS_16        : std_logic_vector (15 downto 0);
   signal dcm_locked        : std_logic;
   component BUFG
      port ( I : in    std_logic; 
         O : out   std_logic);
   end component;
   
   component IBUFGDS
      port ( I  : in    std_logic; 
         IB : in    std_logic; 
         O  : out   std_logic);
   end component;
   
   component dcm_reset
      port(
         RST_IN   : in std_logic;
         DCM_RST  : out std_logic;
         CLK      : in std_logic);
   end component;
   
   -- Period Jitter (unit interval) for block DCM_ADV_INST = 0.019 UI
   -- Period Jitter (Peak-to-Peak) for block DCM_ADV_INST = 0.141 ns
   component DCM_ADV
      generic( CLK_FEEDBACK : string :=  "1X";
         CLKDV_DIVIDE : real :=  2.0;
         CLKFX_DIVIDE : integer :=  1;
         CLKFX_MULTIPLY : integer :=  4;
         CLKIN_DIVIDE_BY_2 : boolean :=  FALSE;
         CLKIN_PERIOD : real :=  10.0;
         CLKOUT_PHASE_SHIFT : string :=  "NONE";
         DCM_AUTOCALIBRATION : boolean :=  TRUE;
         DCM_PERFORMANCE_MODE : string :=  "MAX_SPEED";
         DESKEW_ADJUST : string :=  "SYSTEM_SYNCHRONOUS";
         DFS_FREQUENCY_MODE : string :=  "LOW";
         DLL_FREQUENCY_MODE : string :=  "LOW";
         DUTY_CYCLE_CORRECTION : boolean :=  TRUE;
         FACTORY_JF : bit_vector :=  x"F0F0";
         PHASE_SHIFT : integer :=  0;
         STARTUP_WAIT : boolean :=  FALSE;
         SIM_DEVICE : string :=  "VIRTEX4");
      port ( CLKIN    : in    std_logic; 
         CLKFB    : in    std_logic; 
         DADDR    : in    std_logic_vector (6 downto 0); 
         DI       : in    std_logic_vector (15 downto 0); 
         DWE      : in    std_logic; 
         DEN      : in    std_logic; 
         DCLK     : in    std_logic; 
         RST      : in    std_logic; 
         PSEN     : in    std_logic; 
         PSINCDEC : in    std_logic; 
         PSCLK    : in    std_logic; 
         CLK0     : out   std_logic; 
         CLK90    : out   std_logic; 
         CLK180   : out   std_logic; 
         CLK270   : out   std_logic; 
         CLKDV    : out   std_logic; 
         CLK2X    : out   std_logic; 
         CLK2X180 : out   std_logic; 
         CLKFX    : out   std_logic; 
         CLKFX180 : out   std_logic; 
         DRDY     : out   std_logic; 
         DO       : out   std_logic_vector (15 downto 0); 
         LOCKED   : out   std_logic; 
         PSDONE   : out   std_logic);
   end component;
   
begin                   
   the_dcm_reset : dcm_reset
   port map(
      RST_IN => RST_IN,
      DCM_RST => dcm_rst,
      CLK => CLKIN_IBUFGDS
      );      
   
   GND_BIT <= '0';
   GND_BUS_7(6 downto 0) <= "0000000";
   GND_BUS_16(15 downto 0) <= "0000000000000000";
   CLKIN_IBUFGDS_OUT <= CLKIN_IBUFGDS;
   CLK0_OUT <= CLKFB_IN;
   DCM_NOT_LOCKED <= not dcm_locked;
   CLKFX_BUFG_INST : BUFG
   port map (I=>CLKFX_BUF,
      O=>CLKFX_OUT);
   
   CLKIN_IBUFGDS_INST : IBUFGDS
   port map (I=>CLKIN_P_IN,
      IB=>CLKIN_N_IN,
      O=>CLKIN_IBUFGDS);
   
   CLK0_BUFG_INST : BUFG
   port map (I=>CLK0_BUF,
      O=>CLKFB_IN);
   
   CLK2X_BUFG_INST : BUFG
   port map (I=>CLK2X_BUF,
      O=>CLK2X_OUT);      
   
   CLKDV_BUFG_INST : BUFG
   port map (I=>CLKDV_BUF,
      O=>CLKDV_OUT);       
   
   DCM_ADV_INST : DCM_ADV
   generic map( CLK_FEEDBACK => "1X",
   CLKDV_DIVIDE => 2.0,
   CLKFX_DIVIDE => 2,
   CLKFX_MULTIPLY => 3,
   CLKIN_DIVIDE_BY_2 => FALSE,
   CLKIN_PERIOD => 10.000,
   CLKOUT_PHASE_SHIFT => "NONE",
   DCM_AUTOCALIBRATION => TRUE,
   DCM_PERFORMANCE_MODE => "MAX_SPEED",
   DESKEW_ADJUST => "SYSTEM_SYNCHRONOUS",
   DFS_FREQUENCY_MODE => "LOW",
   DLL_FREQUENCY_MODE => "LOW",
   DUTY_CYCLE_CORRECTION => TRUE,
   FACTORY_JF => x"F0F0",
   PHASE_SHIFT => 0,
   STARTUP_WAIT => FALSE)
   port map (CLKFB=>CLKFB_IN,
      CLKIN=>CLKIN_IBUFGDS,
      DADDR(6 downto 0)=>GND_BUS_7(6 downto 0),
      DCLK=>GND_BIT,
      DEN=>GND_BIT,
      DI(15 downto 0)=>GND_BUS_16(15 downto 0),
      DWE=>GND_BIT,
      PSCLK=>GND_BIT,
      PSEN=>GND_BIT,
      PSINCDEC=>GND_BIT,
      RST=>dcm_rst,
      CLKDV=>CLKDV_BUF,
      CLKFX=>CLKFX_BUF,
      CLKFX180=>open,
      CLK0=>CLK0_BUF,
      CLK2X=>CLK2X_BUF,
      CLK2X180=>open,
      CLK90=>open,
      CLK180=>open,
      CLK270=>open,
      DO=>open,
      DRDY=>open,
      LOCKED=>dcm_locked,
      PSDONE=>open);
   
end BEHAVIORAL;


