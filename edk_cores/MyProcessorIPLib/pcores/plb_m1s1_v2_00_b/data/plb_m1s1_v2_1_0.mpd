###################################################################
##
##     XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS"
##     SOLELY FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR
##     XILINX DEVICES.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION
##     AS ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE, APPLICATION
##     OR STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS
##     IMPLEMENTATION IS FREE FROM ANY CLAIMS OF INFRINGEMENT,
##     AND YOU ARE RESPONSIBLE FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE
##     FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY DISCLAIMS ANY
##     WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE
##     IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR
##     REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF
##     INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
##     FOR A PARTICULAR PURPOSE.
##     
##     (c) Copyright 2005 Xilinx, Inc.
##     All rights reserved.
##
###################################################################

BEGIN plb_m1s1

## Peripheral Options
OPTION IPTYPE = BUS_ARBITER
OPTION HDL = VHDL
OPTION IMP_NETLIST = TRUE
OPTION BUS_STD = PLB
OPTION MAX_MASTERS = 1
OPTION MAX_SLAVES = 1
OPTION DWIDTH = 64
OPTION AWIDTH = 32
OPTION SIM_MODELS = BEHAVIORAL : STRUCTURAL
OPTION SYSLEVEL_DRC_PROC = check_syslevel_settings
OPTION CORE_STATE = ACTIVE
OPTION IP_GROUP = LOGICORE
#OPTION ARCH_SUPPORT = qrvirtex:qrvirtex2:qvirtex:qvirtex2:qvirtexe:virtex:virtex2:virtex2p:virtex4:virtexe

IO_INTERFACE IO_IF = reset_0

## Bus Interfaces
BUS_INTERFACE BUS = SDCR, BUS_STD = DCR, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_PLB_NUM_MASTERS = 4, DT = integer
PARAMETER C_PLB_NUM_SLAVES = 4, DT = integer
PARAMETER C_PLB_MID_WIDTH = 2, DT = integer
PARAMETER C_PLB_AWIDTH = 32, DT = integer
PARAMETER C_PLB_DWIDTH = 64, DT = integer
PARAMETER C_DCR_INTFCE = 0, DT = integer, BUS = SDCR
PARAMETER C_BASEADDR = 0b1111111111, DT = std_logic_vector, MIN_SIZE = 0, BUS = SDCR
PARAMETER C_HIGHADDR = 0b0000000000, DT = std_logic_vector
PARAMETER C_DCR_AWIDTH = 10, DT = integer, BUS = SDCR
PARAMETER C_DCR_DWIDTH = 32, DT = integer, BUS = SDCR
PARAMETER C_EXT_RESET_HIGH = 1, DT = integer, IO_IF = reset_0, IO_IS = polarity
PARAMETER C_IRQ_ACTIVE = 1, DT = std_logic

## Ports
PORT PLB_Clk = "", DIR = IN, SIGIS = CLK, ASSIGNMENT = REQUIRE
PORT SYS_Rst = "", DIR = IN, ASSIGNMENT = REQUIRE
PORT PLB_Rst = PLB_Rst, DIR = OUT
PORT PLB_dcrAck = Sl_dcrAck, DIR = OUT, BUS = SDCR
PORT PLB_dcrDBus = Sl_dcrDBus, DIR = OUT, VEC = [0:C_DCR_DWIDTH-1], BUS = SDCR
PORT DCR_ABus = DCR_ABus, DIR = IN, VEC = [0:C_DCR_AWIDTH-1], BUS = SDCR
PORT DCR_DBus = DCR_Sl_DBus, DIR = IN, VEC = [0:C_DCR_DWIDTH-1], BUS = SDCR
PORT DCR_Read = DCR_Read, DIR = IN, BUS = SDCR
PORT DCR_Write = DCR_Write, DIR = IN, BUS = SDCR
PORT M_ABus = M_ABus, DIR = IN, VEC = [0:(C_PLB_NUM_MASTERS*C_PLB_AWIDTH)-1]
PORT M_BE = M_BE, DIR = IN, VEC = [0:(C_PLB_NUM_MASTERS*(C_PLB_DWIDTH/8))-1]
PORT M_RNW = M_RNW, DIR = IN, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT M_abort = M_abort, DIR = IN, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT M_busLock = M_busLock, DIR = IN, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT M_compress = M_compress, DIR = IN, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT M_guarded = M_guarded, DIR = IN, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT M_lockErr = M_lockErr, DIR = IN, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT M_MSize = M_MSize, DIR = IN, VEC = [0:(C_PLB_NUM_MASTERS*2)-1]
PORT M_ordered = M_ordered, DIR = IN, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT M_priority = M_priority, DIR = IN, VEC = [0:(C_PLB_NUM_MASTERS*2)-1]
PORT M_rdBurst = M_rdBurst, DIR = IN, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT M_request = M_request, DIR = IN, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT M_size = M_size, DIR = IN, VEC = [0:(C_PLB_NUM_MASTERS*4)-1]
PORT M_type = M_type, DIR = IN, VEC = [0:(C_PLB_NUM_MASTERS*3)-1]
PORT M_wrBurst = M_wrBurst, DIR = IN, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT M_wrDBus = M_wrDBus, DIR = IN, VEC = [0:(C_PLB_NUM_MASTERS*C_PLB_DWIDTH)-1]
PORT Sl_addrAck = Sl_addrAck, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES-1]
PORT Sl_MErr = Sl_MErr, DIR = IN, VEC = [0:(C_PLB_NUM_SLAVES*C_PLB_NUM_MASTERS)-1]
PORT Sl_MBusy = Sl_MBusy, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES*C_PLB_NUM_MASTERS - 1 ]
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES-1]
PORT Sl_rdComp = Sl_rdComp, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES-1]
PORT Sl_rdDAck = Sl_rdDAck, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES-1]
PORT Sl_rdDBus = Sl_rdDBus, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES*C_PLB_DWIDTH-1]
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES*4-1]
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES-1]
PORT Sl_SSize = Sl_SSize, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES*2-1]
PORT Sl_wait = Sl_wait, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES-1]
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES-1]
PORT Sl_wrComp = Sl_wrComp, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES-1]
PORT Sl_wrDAck = Sl_wrDAck, DIR = IN, VEC = [0:C_PLB_NUM_SLAVES-1]
PORT PLB_ABus = PLB_ABus, DIR = OUT, VEC = [0:C_PLB_AWIDTH-1]
PORT PLB_BE = PLB_BE, DIR = OUT, VEC = [0:(C_PLB_DWIDTH/8)-1]
PORT PLB_MAddrAck = PLB_MAddrAck, DIR = OUT, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT PLB_MBusy = PLB_MBusy, DIR = OUT, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT PLB_MErr = PLB_MErr, DIR = OUT, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT PLB_MRdBTerm = PLB_MRdBTerm, DIR = OUT, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT PLB_MRdDAck = PLB_MRdDAck, DIR = OUT, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT PLB_MRdDBus = PLB_MRdDBus, DIR = OUT, VEC = [0:(C_PLB_NUM_MASTERS*C_PLB_DWIDTH)-1]
PORT PLB_MRdWdAddr = PLB_MRdWdAddr, DIR = OUT, VEC = [0:(C_PLB_NUM_MASTERS*4)-1]
PORT PLB_MRearbitrate = PLB_MRearbitrate, DIR = OUT, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT PLB_MWrBTerm = PLB_MWrBTerm, DIR = OUT, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT PLB_MWrDAck = PLB_MWrDAck, DIR = OUT, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT PLB_MSSize = PLB_MSSize, DIR = OUT, VEC = [0:(C_PLB_NUM_MASTERS*2)-1]
PORT PLB_PAValid = PLB_PAValid, DIR = OUT
PORT PLB_RNW = PLB_RNW, DIR = OUT
PORT PLB_SAValid = PLB_SAValid, DIR = OUT
PORT PLB_abort = PLB_abort, DIR = OUT
PORT PLB_busLock = PLB_busLock, DIR = OUT
PORT PLB_compress = PLB_compress, DIR = OUT
PORT PLB_guarded = PLB_guarded, DIR = OUT
PORT PLB_lockErr = PLB_lockErr, DIR = OUT
PORT PLB_masterID = PLB_masterID, DIR = OUT, VEC = [0:C_PLB_MID_WIDTH-1]
PORT PLB_MSize = PLB_MSize, DIR = OUT, VEC = [0:1]
PORT PLB_ordered = PLB_ordered, DIR = OUT
PORT PLB_pendPri = PLB_pendPri, DIR = OUT, VEC = [0:1]
PORT PLB_pendReq = PLB_pendReq, DIR = OUT
PORT PLB_rdBurst = PLB_rdBurst, DIR = OUT
PORT PLB_rdPrim = PLB_rdPrim, DIR = OUT
PORT PLB_reqPri = PLB_reqPri, DIR = OUT, VEC = [0:1]
PORT PLB_size = PLB_size, DIR = OUT, VEC = [0:3]
PORT PLB_type = PLB_type, DIR = OUT, VEC = [0:2]
PORT PLB_wrBurst = PLB_wrBurst, DIR = OUT
PORT PLB_wrDBus = PLB_wrDBus, DIR = OUT, VEC = [0:C_PLB_DWIDTH-1]
PORT PLB_wrPrim = PLB_wrPrim, DIR = OUT
PORT PLB_SaddrAck = PLB_SaddrAck, DIR = OUT
PORT PLB_SMErr = PLB_SMErr, DIR = OUT, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT PLB_SMBusy = PLB_SMBusy, DIR = OUT, VEC = [0:C_PLB_NUM_MASTERS-1]
PORT PLB_SrdBTerm = PLB_SrdBTerm, DIR = OUT
PORT PLB_SrdComp = PLB_SrdComp, DIR = OUT
PORT PLB_SrdDAck = PLB_SrdDAck, DIR = OUT
PORT PLB_SrdDBus = PLB_SrdDBus, DIR = OUT, VEC = [0:C_PLB_DWIDTH-1]
PORT PLB_SrdWdAddr = PLB_SrdWdAddr, DIR = OUT, VEC = [0:3]
PORT PLB_Srearbitrate = PLB_Srearbitrate, DIR = OUT
PORT PLB_Sssize = PLB_Sssize, DIR = OUT, VEC = [0:1]
PORT PLB_Swait = PLB_Swait, DIR = OUT
PORT PLB_SwrBTerm = PLB_SwrBTerm, DIR = OUT
PORT PLB_SwrComp = PLB_SwrComp, DIR = OUT
PORT PLB_SwrDAck = PLB_SwrDAck, DIR = OUT
PORT ArbAddrVldReg = "", DIR = OUT
PORT Bus_Error_Det = "", DIR = OUT, EDGE = RISING, SIGIS = INTERRUPT

END
